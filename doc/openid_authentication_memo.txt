*setup
**標準作業
# sudo gem install ruby-openid
# script/plugin install open_id_authentication
# rake open_id_authentication:db:create
# rake db:migrate
**お好みで
# script/generate model User nickname:string email:string claimed_url:string fullname:string birth_date:string gender:integer postcode:string country:string language:string timezone:string
# script/generate model TrastedOpenidProvider endpoint_url:string

**ログインしないと見れないページがあるならapp/controllers/application.rbに追加する
class ApplicationController < ActionController::Base
  # 未ログイン状態でログインが必要なページに入ろうとすると、元のページに戻される
  # ログイン専用ページがない場合など
  def block_until_authorized
    unless login?
      flash[:notice] = "Please log in"
      redirect_to(request.refferer)
    end
  end

  # ログインが必要なページならば認証ページをはさみ、認証したらそのページに誘導する
  # ログイン専用ページがある場合など
  # 一部
  # http://japan.internet.com/column/developer/20080627/26.html
  # を参考に書き換え必要
  def go_through_authorized
    unless login?
      flash[:notice] = "Please log in"
      # save the URL the user requested so we can hop back to it
      # after login
      session[:jumpto] = request.parameters
      redirect_to("/login")
    end
  end

  def login?
    session[:user_id]
  end
end

**ログインが必要なページを指定する
class SomeController < ApplicationController
  before_filter :block_until_authorized,
    :only => [ :new , :edit, :create, :update, :destroy]

end

*セッションコントローラーの作成
***generate controller
# script/generate controller sessions

***set route to config/routes.rb(RESTful風味)
  map.open_id_complete 'session', :controller => "sessions", :action => "create", :requirements => { :method => :get }
  map.resource :session
  map.login  '/login',  :controller => 'sessions', :action => 'new'
  map.logout '/logout', :controller => 'sessions', :action => 'destroy'

***paste this controller
class SessionsController < ApplicationController

  # TODO:change default page
  @@default_page = "/"

  # require property from a OpenID provider
  # [:(User model property) => "(OpenID provider property)"]
  @@required = [
    :nickname => "nickname",
    :email => "email"
  ]

  # optional property from a OpenID provider (sreg)
  # [:(User model property) => "(OpenID provider property)"]
  @@optional = [
    :fullname => "fullname",
    :birth_date => "birth_date",
    :gender => "gender",
    :postcode => "postcode",
    :country => "country",
    :language => "language",
    :timezone => "timezone"
  ]

  # TODO:if your app has an especialy login page, you can use this index action
  # GET /sessions/new
  def new
    #redirect_to :controller => "TODO::your_logined_user_controller" if login?
    redirect_to default_page
  end

  # POST /sessions
  def create
    if using_open_id?
      open_id_authentication
    else
      flash[:error] = "You must provide an OpenID URL"
      redirect_to tyied_page
    end
  end

  # DELETE /sessions
  # GET    /logout
  def destroy
    session[:user_id] = nil
    redirect_to default_page
  end

protected

  def open_id_authentication
    # need discover_status_patch for this code
    include OpenIdAuthentication_with_discover_status_patch
    authenticate_with_open_id(params[:openid_url],
                              :required => @@required.keys
                              :optional => @@optional.keys) do
      |status, identity_url, registration, discover_status|

      case status
      when :missing
        failed_login "Sorry, the OpenID server couldn't be found"
      when :canceled
        failed_login "OpenID verification was canceled"
      when :failed
        failed_login "Sorry, the OpenID verification failed"
      when :successful
        
        server_url = discover_status.endpoint.server_url
        if not TrastedOpenidProvider.find_by_url(server_url)
          # 信頼していないOPでのログインは拒否する
          failed_login "Sorry, untrusted OpenID provider: #{server_url}"
        elsif @current_user = @User.find_by_identity_url(identity_url)
          # TODO:need to change to your User model here
          assign_registration_attributes!(registration)
          @current_user.claimed_url = identity_url

          if current_user.save
            successful_login
          else
            failed_login "Your OpenID profile registration failed: " +
              @current_user.errors.full_messages.to_sentence
          end
        else
          failed_login "Sorry, no user by that identity URL exists"
        end
      end

    end
  end

  def successful_login
    session[:user_id] = @current_user.id
    #jumpto = session[:jumpto] || default_page
    #session[:jumpto] = nil
    #redirect_to(jumpto)
    redirect_to(root_url)
  end

  def failed_login(message)
    flash[:error] = message
    redirect_to tyied_page
  end

  def root_url
    # TODO:check with config/routes.rb
    open_id_complete
  end
 
  def default_page
    @@default_page
  end

  def tyied_page
    request.refferer
  end

  # registration is a hash containing the valid sreg keys given above
  # use this to map them to fields of your user model
  def assign_registration_attributes!(registration)
    model_to_registration_mapping.each do |model_attribute, registration_attribute|
      unless registration[registration_attribute].blank?
        @current_user.send("#{model_attribute}=", registration[registration_attribute])
      end
    end
  end

  # TODO:change this hash like your user model.
  def model_to_registration_mapping
    @@required.merge(@@optional)
  end

end



**必要ならapp/views/sessions/new.html.erbを作る
<% if flash[:error] -%>
  <%= flash[:error] %>
<% end -%>
<% form_tag(session_url) do |f| -%>
  <label for="openid_url" >
    OpenId URL:
  </label>
  <%= text_field_tag :openid_url -%>
  <%= submit_tag "Login" -%>
<% end -%>


*ホワイトリスト形式でOpenIDプロバイダを指定するなら以下を追加
ちなみに、include OpenIdAuthenticationはプラグインフォルダのinit.rbにて行われる

include OpenIdAuthentication_with_discover_status_patch

module OpenIdAuthentication_with_discover_status_patch
    def complete_open_id_authentication
      params_with_path = params.reject { |key, value| request.path_parameters[key] }
      params_with_path.delete(:format)
      open_id_response = timeout_protection_from_identity_server { open_id_consumer.complete(params_with_path, requested_url) }
      identity_url     = normalize_url(open_id_response.endpoint.claimed_id) if open_id_response.endpoint.claimed_id

      case open_id_response.status
      when OpenID::Consumer::SUCCESS
        yield Result[:successful], identity_url, OpenID::SReg::Response.from_success_response(open_id_response), open_id_response
      when OpenID::Consumer::CANCEL
        yield Result[:canceled], identity_url, nil, open_id_response
      when OpenID::Consumer::FAILURE
        yield Result[:failed], identity_url, nil, open_id_response
      when OpenID::Consumer::SETUP_NEEDED
        yield Result[:setup_needed], open_id_response.setup_url, nil, open_id_response
      end
    end
end